import React, { MutableRefObject } from "react";

// ================== –°–∞–º —Ö—É–∫ ================

export function useHover<T>(): [MutableRefObject<T>, boolean] {
    const [value, setValue] = React.useState<boolean>(false);
    const ref: any = React.useRef<T | null>(null);

    const handleMouseOver = (): void => setValue(true);
    const handleMouseOut = (): void => setValue(false);

    React.useEffect(() => {
        const node: any = ref.current;
        if (node) {
            node.addEventListener("mouseover", handleMouseOver);
            node.addEventListener("mouseout", handleMouseOut);
            return () => {
                node.removeEventListener("mouseover", handleMouseOver);
                node.removeEventListener("mouseout", handleMouseOut);
            };
        }
    }, [ref.current]);
    
    return [ref, value];
}

// ================== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ ================

function UseHoverExample() {
    const [hoverRef, isHovered] = useHover<HTMLDivElement>();

    return (
        <div>
            <h2>useHover</h2>
            <p>Hover –Ω–∞ js</p>
            <div ref={hoverRef}>{isHovered ? "üòÅ" : "‚òπÔ∏è"}</div>
        </div>
    );
}

export default UseHoverExample;
