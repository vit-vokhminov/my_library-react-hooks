import React from "react";

// Hook
const useAsync = <T, E = string>(asyncFunction: () => Promise<T>, immediate = true) => {
    const [status, setStatus] = React.useState<"idle" | "pending" | "success" | "error">("idle");
    const [value, setValue] = React.useState<T | null>(null);
    const [error, setError] = React.useState<E | null>(null);

    const execute = React.useCallback(() => {
        setStatus("pending");
        setValue(null);
        setError(null);
        return asyncFunction()
            .then((response: any) => {
                setValue(response);
                setStatus("success");
            })
            .catch((error: any) => {
                setError(error);
                setStatus("error");
            });
    }, [asyncFunction]);

    React.useEffect(() => {
        if (immediate) {
            execute();
        }
    }, [execute, immediate]);
    return { execute, status, value, error };
};


const myFunction = (): Promise<string> => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const rnd = Math.random() * 10;
            rnd <= 5 ? resolve("Submitted successfully üôå") : reject("Oh no there was an error üòû");
        }, 2000);
    });
};

function App() {
    const { execute, status, value, error } = useAsync<string>(myFunction, false);
    return (
        <div>
            <h2>useAsync</h2>
            
            {status === "idle" && <div>–í—ã–∑–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é</div>}
            {status === "pending" && <div>–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</div>}
            {status === "success" && <div>{value}</div>}
            {status === "error" && <div>{error}</div>}
            
            <button onClick={execute} disabled={status === "pending"}>
                {status !== "pending" ? "Click me" : "Loading..."}
            </button>
            <div>status –≤—ã–∑–æ–≤–∞: {status}</div>

            <p>–ï—Å–ª–∏ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–ø—Ä–æ—Å–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ö—É–∫. </p>
        </div>
    );
}

export default App;
